{
  AE - VN Tools
  © 2007-2013 WinKiller Studio and The Contributors.
  This software is free. Please see License for details.

  Open\Save Dialog wrapper module
  
  Written by dsp2003.
}
unit AnimED_Dialogs;

interface

uses Classes, SysUtils, Dialogs, AnimED_Translation, StringsW, UnicodeDialogs;

{ open multiple files }
function ODialog_Files  (var FileNames : TStringsW) : boolean;

{ open single file }
function ODialog_File   (var FileName : widestring; Filter : integer = 0; Index : integer = 0; WindowTitle : widestring = '') : boolean;

{ wrappers for ODialog_File }
function ODialog_Archive(var FileName : widestring;                       Index : integer = 0) : boolean;
function ODialog_Image  (var FileName : widestring;                       Index : integer = 0) : boolean;

{ save file }
function SDialog_File   (var FileName : widestring; Filter : integer = 0; Index : integer = 0; WindowTitle : widestring = '') : boolean;

{ wrappers for SDialog_File }
function SDialog_Archive(var FileName : widestring;                       Index : integer = 0) : boolean;
function SDialog_Image  (var FileName : widestring;                       Index : integer = 0) : boolean;

function ODialog_DefaultOptions : TOpenOptions;
function SDialog_DefaultOptions : TOpenOptions;

var DialogFilters : array[0..4] of widestring;
    oDialog : TOpenDialogW;
    sDialog : TSaveDialogW;
{ 0 - all files,
  1 - archives,
  2 - images [unused]
  3 - reserved
  4 - reserved }

implementation

//uses AnimED_Main;

function ODialog_Files;
var tmpStream : TStream;
begin
 oDialog := TOpenDialogW.Create(nil);
// with MainForm do begin
 oDialog.Filter  := DialogFilters[0];
 oDialog.Options := [ofHideReadOnly,ofEnableSizing,ofForceShowHidden,ofAllowMultiSelect];
 oDialog.Title   := 'Select files...'; //ODialog_Title_Files;
//  OpenDialog.Files   := FileNames;
 Result             := oDialog.Execute;
 // Assigning filenames
 if Result <> False then begin
  tmpStream := TMemoryStream.Create;
  oDialog.Files.SaveToStream(tmpStream);
  if tmpStream.Size = 0 then Result := False else Result := True;
  tmpStream.Position := 0;
  FileNames.LoadFromStream(tmpStream);
  FreeAndNil(tmpStream);
 end;
// end;
 oDialog.Free;
end;

function ODialog_File;
begin
// with MainForm do begin
 oDialog             := TOpenDialogW.Create(nil);
 oDialog.Filter      := DialogFilters[Filter];
 oDialog.FilterIndex := Index;
 oDialog.Options     := ODialog_DefaultOptions;
 oDialog.Title       := WindowTitle;
 if FileName <> ''    then oDialog.FileName := FileName;
 Result              := oDialog.Execute;
 FileName            := oDialog.FileName;
 oDialog.Free;
// end;
end;

function ODialog_Archive;
begin
 Result := ODialog_File(FileName,1,Index,'Select archive to open...'{ODialog_Title_Archive});
end;

function ODialog_Image;
begin
 Result := ODialog_File(FileName,2,Index,'Select image to open...'{ODialog_Title_Image});
end;

function SDialog_File;
begin
// with MainForm do begin
 sDialog             := TSaveDialogW.Create(nil);
 sDialog.Filter      := DialogFilters[Filter];
 sDialog.FilterIndex := Index;
 sDialog.Options     := SDialog_DefaultOptions;
 sDialog.Title       := WindowTitle;
 if FileName <> ''    then sDialog.FileName := FileName;
 Result              := sDialog.Execute;
 FileName            := sDialog.FileName;
 sDialog.Free;
// end;
end;

function SDialog_Archive;
begin
 Result := SDialog_File(FileName,1,Index,'Save archive as...'{SDialog_Title_Archive});
end;

function SDialog_Image;
begin
 Result := SDialog_File(FileName,2,Index,'Save image as...'{SDialog_Title_Image});
end;

function ODialog_DefaultOptions;
begin
 Result := [ofHideReadOnly,ofEnableSizing,ofForceShowHidden];
end;

function SDialog_DefaultOptions;
begin
 Result := [ofOverwritePrompt,ofHideReadOnly,ofEnableSizing,ofForceShowHidden];
end;

end.