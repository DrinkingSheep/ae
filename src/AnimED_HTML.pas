{
  AE - VN Tools
  © 2007-2013 WinKiller Studio and The Contributors.
  This software is free. Please see License for details.

  HTML generators
  Written by dsp2003.
}
unit AnimED_HTML;

interface

uses AnimED_Translation,
     AnimED_Translation_Strings,
     AnimED_Archives,
     AnimED_Version,
     AnimED_Console,
     AnimED_Directories,
     AnimED_FileTypes,
     AG_Japanese_Colours,
     AA_RFA,
     Windows, SysUtils, Classes, Forms,
     JUtils, StringsW, JReconvertor;


procedure HTML_Arc_MakeFormatList(FileName : widestring);
procedure HTML_Arc_MakeFileList(FileName : widestring);
procedure HTML_Dir_MakeFileList(FileName : widestring);
procedure HTML_Img_MakeColorList(FileName : widestring);

implementation

uses AnimED_Main;

procedure HTML_WriteHead(var List : TStringsW; Title : widestring);
begin
 with List do begin
  Add('<!-- Чё, HTML ни разу не видел? Спереть хочешь? По глазам вижу, что хочешь. ;) -->');
  Add('<!-- Generated by '+Application.Title+' -->');
  Add('<html>');
  Add('<head>');
  Add('<meta http-equiv="Content-Type" content="text/html; charset=utf-8">');
  
  Add('<style>');
  Add('BODY{background-color:FFFFFF;font-family:arial,arial unicode,verdana,tahoma,sans-serif;color:#000000;font-size:11px;margin:0px;}');
  Add('table{padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;border:0px;font-size:11px;}');
  Add('A:LINK{color:#0b5fb7;text-decoration: none;}');
  Add('A:VISITED{color:#254394;text-decoration: none;}');
  Add('A:ACTIVE{color:#609ad2;}');
  Add('A:HOVER{color:#FF8105;text-decoration:underline;}');
  Add('p{margin-top:5px;margin-bottom:5px;}');
  Add('br{padding-top:4px;padding-bottom:4px;}');
  Add('hr{margin-top:5px;margin-bottom:5px;}');
  Add('</style>');
  Add('<title>'+Title+'</title>');
  Add('</head>');
  Add('<body>');
  Add('<h4>Generated by '+Application.Title+'</h4>');
  Add('<h5>'+APP_COPYRIGHT+'</h5>');
  Add('<h3>'+Title+'</h3>');
  Add('<hr');
 end;
end;

procedure HTML_WriteFoot(var List : TStringsW);
begin
 with List do begin
  Add('</body>');
  Add('</html>');
 end;
end;

procedure HTML_Arc_MakeFormatList;
var HTMLList : TStringsW;
    i : integer;
    ProcAddr, ProcAddrRAW : longword;
begin
 ProcAddrRAW := Cardinal(@EA_RAW);

 HTMLList := TStringsW.Create;

 HTML_WriteHead(HTMLList,'Supported archive format list');

 with HTMLList do try
  Add('<table width="100%">');
  Add('<tr>');
  Add('<td>ID</td>');
  Add('<td><nobr>Display name</nobr></td>');
  Add('<td>Ext</td>');
  Add('<td><nobr>FN Len</nobr></td>');
  Add('<td><nobr>Status</nobr></td>');
  Add('<td><nobr>Ex method</nobr></td>');
  Add('<td><nobr>Last upd</nobr></td>');
  Add('</tr>');

  for i := 0 to Length(ArcFormats)-1 do with ArcFormats[i] do begin
   Add('<tr><td>');
   Add(inttostr(ID));
   Add('</td><td>');
   Add(IDS);
   Add('</td><td>');
   Add(Ext);
   Add('</td><td>');
   Add(inttostr(FLen));
   Add('</td><td>');
   Add(ArcStat[Stat]);
   Add('</td><td>');
   ProcAddr := Cardinal(@Extr);
   if ProcAddr <> ProcAddrRAW then Add('Custom') else Add('RAW');
   Add('</td><td>');
   Add(AEGetDate(Ver,True));
   Add('</td></tr>');
  end;

  Add('</table>');

  HTML_WriteFoot(HTMLList);

  SaveToFile(FileName);
 finally
  FreeAndNil(HTMLList);
 end;
end;

procedure HTML_Arc_MakeFileList;
var HTMLList : TStringsW;
    i : integer;
begin
 if ArchiveStream <> nil then begin
  HTMLList := TStringsW.Create;
  
  HTML_WriteHead(HTMLList,ExtractFileName(ArchiveFileName));
  
  with HTMLList, MainForm do try
   Add('<pre>');
   Add('<table border="0" cellpadding="2" cellspacing="2">');
   Add('<tr><td>'+L_ArchiveFormatTitle.Caption+'</td><td>'+RFA_IDS+'</td></tr>');
   Add('<tr><td>'+L_ArchiveSizeTitle.Caption+'</td><td>'+inttostr(ArchiveStream.Size)+' bytes</td></tr>');
//   Add('<tr><td>CRC32:</td><td>'+E_ArchiveHex.Text+'</td></tr>');
//   Add('<tr><td>MD5:</td><td>'+E_ArchiveMD5.Text+'</td></tr>');
   Add('</table>');
   Add('<hr>');
   Add('<table border="0" cellpadding="2" cellspacing="2">');
   Add('<tr><td>####</td><td>'+JIS2Wide(LV_ArcFileList.Column[0].Caption)+'</td><td>'+JIS2Wide(LV_ArcFileList.Column[1].Caption)+'</td><td>'+JIS2Wide(LV_ArcFileList.Column[3].Caption)+'</td></tr>');
   for i := 1 to RecordsCount do begin
    Add('<tr><td>'+inttohex(i,4)+'</td><td>'+JIS2Wide(RFA[i].RFA_3)+'</td><td>'+inttohex(RFA[i].RFA_2,8)+'</td><td>'+inttohex(RFA[i].RFA_1,8)+'</td></tr>');
   end;
   Add('</table>');
   Add('</pre>');
   
   HTML_WriteFoot(HTMLList);

   SaveToFile(FileName);
  finally
   FreeAndNil(HTMLList);
  end;
 end else LogW(AMS[wArchiveExtract]);
end;

procedure HTML_Dir_MakeFileList;

 procedure FileExtHit(var Str : widestring; var List : TStringList; Ext, App : string);
 var i : longword;
 begin
  if Str <> '' then Exit;
  with List do for i := 0 to Count-1 do if Ext = Strings[i] then begin
   Str := App;
   Break;
  end;
 end;

var FExt,FName,NStr,FDir,FDir2 : widestring;
    i : longword;
    HTMLList : TStringsW;
begin
 HTMLList := TStringsW.Create;

 HTML_WriteHead(HTMLList,'Listing of '+RootDir);

 with HTMLList,MainForm do begin
  Add('<table width="100%">');
  Add('<tr>');
  Add('<td><img src="bitmaps/dir.png"> File name and path</td>');
  Add('</tr>');
  for i := 0 to AddedFilesW.Count-1 do begin
   FName := AddedFilesW.Strings[i];
   FExt  := lowercase(ExtractFileExt(FName));
   FDir  := ExtractFilePath(FName);
   if FDir2 <> FDir then begin
    Add('<tr><td><hr></td></tr>');
    FDir2 := FDir;
   end;
   FileExtHit(NStr,File_Ext_Script, Fext,'txt');
   FileExtHit(NStr,File_Ext_Streams,Fext,'wav');
   FileExtHit(NStr,File_Ext_Music,  Fext,'mid');
   FileExtHit(NStr,File_Ext_Images, Fext,'pic');
   FileExtHit(NStr,File_Ext_Other,  Fext,'fil');
   FileExtHit(NStr,File_Ext_Archive,Fext,'arc');
   FileExtHit(NStr,File_Ext_Binary, Fext,'exe');
   if NStr = '' then NStr := 'fil';
   Add('<tr><td><img src="bitmaps/'+NStr+'.png"> '+FName+'</td></tr>');
  end;
  Add('</table>');
  HTML_WriteFoot(HTMLList);
  SaveToFile(FileName);
 end;

 FreeAndNil(HTMLList);

end;

procedure HTML_Img_MakeColorList;
var i, j, k : integer;
    HTMLList : TStringsW;
begin

 HTMLList := TStringsW.Create;

 HTML_WriteHead(HTMLList,'AE Japanese Colour Table');

 with HTMLList do try
  Add('<p><table border="0" cellpadding="2" cellspacing="2">');
  k := 0;
  for i := 0 to 266 do begin
   if k = 0 then Add('<tr>');
   j := jColors[i].c;
   j := (j shl 16 and $ff0000) + (j and $ff00) + (j shr 16 and $ff);
   Add('<td width="16px" height="16px" bgcolor="#'+IntToHex(j,6)+'" title="'+jColors[i].t+'"></td>');
   inc(k);
   if k > 48 then k := 0;
   if k = 0 then Add('</tr>');
  end;
  Add('</tr></table></p>');
  Add('<p><table border="0" cellpadding="2" cellspacing="2">');
  Add('<tr><td>@</td><td>#HTML</td><td>Printable name</td></tr>');
  for i := 0 to 266 do begin
   j := jColors[i].c;
   j := (j shl 16 and $ff0000) + (j and $ff00) + (j shr 16 and $ff);
   Add('<tr><td width="16px" height="16px" bgcolor="#'+IntToHex(j,6)+'" title="'+jColors[i].t+'"></td><td>#'+IntToHex(j,6)+'</td><td>'+jColors[i].t+'</td></tr>');
  end;
  Add('</table></p>');

  HTML_WriteFoot(HTMLList);

  SaveToFile(FileName);

 finally
  FreeAndNil(HTMLList);
 end;

end;

end.